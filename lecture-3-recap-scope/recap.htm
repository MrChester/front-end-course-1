<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Untitled Page</title>
</head>
<body>

	<script type="text/javascript" language="javascript">
		debugger;

		function Assert(fact, text) {
			text = text || "";
			if (!fact) {
				alert("Assert failure!" + text);
			}
		}
		
		var string = "hello" + " " + "world!";
		var string2 = "ertert" - "dfgdfg"; // WAT
		Assert(isNaN(string5)); // isNaN

		Assert("example".length == 7);
		Assert("example".indexOf("x") == 1);

		//null && undefined
		Assert(null + 1 == 1);
		Assert(isNaN(undefined + 1));
		Assert(typeof null == "object"); // WAT
		Assert(typeof undefined == "undefined");
		Assert(null == undefined); // by standart

		//Converting Strings to Numbers
		var multiplicationResult = "25" * "2";
		Assert(multiplicationResult === 50);

		var subtractionResult = "50" - 0;
		Assert(subtractionResult === 50);

		var stringAsNumber = + "50"; // works, but looks like a P.O.S.
		Assert(stringAsNumber == 50);
		
		var rawInput = "123.4texs4";
		var integer = parseInt(rawInput);
		Assert(integer === 123);
		var floatingNumber = parseFloat(rawInput);
		Assert(floatingNumber === 123.4);
		var integer2 = rawInput - 0;
		Assert(isNaN(integer2));

		Math.pow(2, 1024);

		Assert(1 === 1.0);

		Assert(parseInt("08") == 0);
		Assert(parseInt("08", 10) == 8);
		Assert(Number("08") == 8);

		Assert(Number("10") == 10);
		Assert(Number("1.345") == 1.345);
		Assert(isNaN(Number("5 dollars")));

		//Arrays
		var array = new Array(1, 2, 3);
		Assert(array.length == 3);
		array[29] = 5;
		Assert(array.length == 30);

		array[-3.141592] = "-Pi"; 
		Assert(array[-3.141592] == "-Pi");

		array = [1, "234234", true, function() { alert("hello!"); } ];

		var array1 = [1, 3, 22, 5];
		array1.sort();
		Assert(array1.join(" ") == "1 22 3 5");

		//Operators
		//Comparison Operators
		Assert(2 > 1);
		Assert("2" > 1);
		Assert("2a" > 1 == false);
		Assert("2a" < 1 == false);
		Assert("google.com" > "bing.com");

		var newObject = {};
		
		Assert("a" > newObject);
		Assert("a" > "[object Object]");
		
		Assert(newObject > 1 == false);
		Assert(newObject < 1 == false);
		Assert(newObject != 1);
		
		newObject.valueOf = function() { return 2 };

		Assert(newObject > 1);
		Assert(newObject < "3");
		
		Assert("a" > newObject == false);
		Assert("a" < newObject == false);
		Assert("a" != newObject);

		newObject.valueOf = null;
		Assert("a" > newObject);

		/*
		"a" > true
		*/
		
		//Addition (+)
		var summ = 5 + "5" - 0 + true;
		
		//Equality (==) and Identity (===)
		Assert(null == undefined);
		Assert(null !== undefined);
		
	    Assert(12 == "12");
		
		//The in Operator
		var obj = {name: "Dima"};
		Assert("name" in obj);

		//The delete Operator
		delete obj.name;
		Assert("name" in obj == false);

		// instanceof operators
		var date = new Date();
		Assert(date instanceof Date);

		//Logical OR 
		var x;
		x = x || true;
		Assert(x == true);

		x = null || 0 || { name: "test" };
		Assert(x.name == "test");
	
		x = 0 || "" || null;
		Assert(x == null);
		
		///
		var x = new Boolean(false);
        if (x){
          //alert(1);
        }

	</script>

</body>
</html>
